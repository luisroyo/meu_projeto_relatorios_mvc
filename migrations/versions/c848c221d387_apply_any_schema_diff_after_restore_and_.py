"""Apply any schema diff after restore and stamp

Revision ID: c848c221d387
Revises: 8d3ce5809e5b
Create Date: 2025-06-22 12:54:54.839658

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c848c221d387'
down_revision = '8d3ce5809e5b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ronda_segmento',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ronda_id', sa.Integer(), nullable=False),
    sa.Column('inicio_dt', sa.DateTime(), nullable=True), # Permitir nulo inicialmente
    sa.Column('termino_dt', sa.DateTime(), nullable=True), # Permitir nulo inicialmente
    sa.Column('duracao_minutos', sa.Integer(), nullable=False),
    sa.Column('vtr', sa.String(length=50), nullable=True),
    sa.Column('is_incomplete_segment', sa.Boolean(), nullable=False),
    sa.Column('is_duration_anomalous_segment', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['ronda_id'], ['ronda.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ronda_segmento', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ronda_segmento_ronda_id'), ['ronda_id'], unique=False)

    with op.batch_alter_table('ronda', schema=None) as batch_op:
        # Adicionar as colunas como NULÁVEIS primeiro
        batch_op.add_column(sa.Column('is_incomplete', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('is_duration_anomalous', sa.Boolean(), nullable=True))
        batch_op.create_index(batch_op.f('ix_ronda_supervisor_id'), ['supervisor_id'], unique=False)

    # Preencher os valores existentes para FALSE (ou outro valor padrão desejado)
    # Isso é necessário ANTES de tentar alterar para NOT NULL
    op.execute("UPDATE ronda SET is_incomplete = FALSE WHERE is_incomplete IS NULL")
    op.execute("UPDATE ronda SET is_duration_anomalous = FALSE WHERE is_duration_anomalous IS NULL")

    with op.batch_alter_table('ronda', schema=None) as batch_op:
        # Altere as colunas para NOT NULL após preencher os valores
        batch_op.alter_column('is_incomplete',
                               existing_type=sa.Boolean(),
                               nullable=False,
                               existing_nullable=True) # Importante para Alembic saber o estado anterior
        batch_op.alter_column('is_duration_anomalous',
                               existing_type=sa.Boolean(),
                               nullable=False,
                               existing_nullable=True) # Importante para Alembic saber o estado anterior

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ronda', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ronda_supervisor_id'))
        # No downgrade, se as colunas foram feitas NOT NULL, elas precisam voltar a ser nullable primeiro
        # Se você está no meio de um processo de desenvolvimento e pode dropar o DB, isso é menos crítico.
        # Mas para um downgrade limpo, idealmente elas seriam alteradas para nullable=True, depois dropadas.
        batch_op.drop_column('is_duration_anomalous')
        batch_op.drop_column('is_incomplete')

    with op.batch_alter_table('ronda_segmento', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ronda_segmento_ronda_id'))

    op.drop_table('ronda_segmento')
    # ### end Alembic commands ###