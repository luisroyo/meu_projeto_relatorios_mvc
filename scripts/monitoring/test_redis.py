#!/usr/bin/env python3
"""
Script para testar conex√£o com Redis
Execute: python test_redis.py
"""

import os
import redis
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

def test_redis_connection():
    """Testa a conex√£o com o Redis."""
    print("üîç Testando configura√ß√£o do Redis...")
    
    # Verifica vari√°veis de ambiente
    redis_url = os.getenv("REDIS_URL")
    cache_redis_url = os.getenv("CACHE_REDIS_URL")
    
    # URL final que ser√° usada (prioridade para REDIS_URL, depois CACHE_REDIS_URL)
    final_redis_url = redis_url or cache_redis_url
    
    print(f"REDIS_URL: {'‚úÖ Configurada' if redis_url else '‚ùå N√£o configurada'}")
    print(f"CACHE_REDIS_URL: {'‚úÖ Configurada' if cache_redis_url else '‚ùå N√£o configurada'}")
    print(f"URL Final: {'‚úÖ ' + final_redis_url.split('@')[1] if final_redis_url else '‚ùå Nenhuma configurada'}")
    
    # Testa conex√£o com Redis
    if final_redis_url:
        try:
            print(f"\nüîó Tentando conectar com: {final_redis_url.split('@')[1] if '@' in final_redis_url else final_redis_url}")
            r = redis.from_url(final_redis_url)
            
            # Testa ping
            pong = r.ping()
            print(f"Ping: {'‚úÖ Sucesso' if pong else '‚ùå Falha'}")
            
            # Testa opera√ß√µes b√°sicas
            r.set('test_key', 'test_value', ex=60)  # Expira em 60 segundos
            value = r.get('test_key')
            print(f"Set/Get: {'‚úÖ Sucesso' if value == b'test_value' else '‚ùå Falha'}")
            
            # Limpa o teste
            r.delete('test_key')
            print("üßπ Chave de teste removida")
            
            print("üéâ Redis est√° funcionando perfeitamente!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao conectar com Redis: {e}")
            return False
    else:
        print("‚ö†Ô∏è  REDIS_URL n√£o configurada. O sistema usar√° SimpleCache (mem√≥ria local).")
        return False

def check_cache_config():
    """Verifica a configura√ß√£o de cache da aplica√ß√£o."""
    print("\nüìã Verificando configura√ß√£o de cache...")
    
    try:
        import sys
        import os
        # Adiciona o diret√≥rio raiz ao path para importar config
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))
        
        from config import Config, DevelopmentConfig, ProductionConfig
        
        # Testa configura√ß√£o base
        config = Config()
        print(f"Config Base - CACHE_TYPE: {config.CACHE_TYPE}")
        
        # Testa configura√ß√£o de desenvolvimento
        dev_config = DevelopmentConfig()
        print(f"Development - CACHE_TYPE: {dev_config.CACHE_TYPE}")
        
        # Testa configura√ß√£o de produ√ß√£o
        prod_config = ProductionConfig()
        print(f"Production - CACHE_TYPE: {prod_config.CACHE_TYPE}")
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar configura√ß√£o: {e}")

if __name__ == "__main__":
    print("üöÄ Teste de Configura√ß√£o do Redis")
    print("=" * 40)
    
    test_redis_connection()
    check_cache_config()
    
    print("\n" + "=" * 40)
    print("üí° Dicas:")
    print("- Para usar Redis no Render, configure REDIS_URL nas vari√°veis de ambiente")
    print("- Para desenvolvimento local, o SimpleCache √© suficiente")
    print("- O cache √© usado principalmente para respostas da API Gemini") 