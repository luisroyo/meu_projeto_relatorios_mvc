#!/usr/bin/env python3
"""
Script para monitorar a conex√£o com o banco de dados PostgreSQL.
√ötil para detectar e resolver problemas de conex√£o SSL no Render.
"""

import os
import sys
import time
import logging
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from sqlalchemy.exc import OperationalError, DisconnectionError
from sqlalchemy import text

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s [%(filename)s:%(lineno)d] %(message)s'
)
logger = logging.getLogger(__name__)

def test_connection():
    """Testa a conex√£o com o banco de dados."""
    try:
        # Testa uma query simples
        result = db.session.execute(text('SELECT 1 as test'))
        row = result.fetchone()
        
        if row and row[0] == 1:
            logger.info("‚úÖ Conex√£o com banco de dados OK")
            return True
        else:
            logger.error("‚ùå Query de teste falhou")
            return False
            
    except OperationalError as e:
        if "SSL connection has been closed" in str(e):
            logger.error("‚ùå Erro SSL: Conex√£o SSL fechada inesperadamente")
        else:
            logger.error(f"‚ùå Erro operacional: {e}")
        return False
        
    except DisconnectionError as e:
        logger.error(f"‚ùå Erro de desconex√£o: {e}")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")
        return False

def reconnect():
    """Tenta reconectar ao banco de dados."""
    logger.info("üîÑ Tentando reconectar ao banco de dados...")
    
    try:
        # Fecha conex√µes existentes
        db.session.rollback()
        db.session.close()
        db.engine.dispose()
        
        # Aguarda um pouco
        time.sleep(2)
        
        # Testa nova conex√£o
        if test_connection():
            logger.info("‚úÖ Reconex√£o bem-sucedida!")
            return True
        else:
            logger.error("‚ùå Falha na reconex√£o")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro durante reconex√£o: {e}")
        return False

def monitor_connection(duration_minutes=5, interval_seconds=30):
    """
    Monitora a conex√£o por um per√≠odo espec√≠fico.
    
    Args:
        duration_minutes: Dura√ß√£o do monitoramento em minutos
        interval_seconds: Intervalo entre testes em segundos
    """
    logger.info(f"üîç Iniciando monitoramento por {duration_minutes} minutos...")
    logger.info(f"‚è±Ô∏è  Intervalo de teste: {interval_seconds} segundos")
    
    start_time = time.time()
    end_time = start_time + (duration_minutes * 60)
    
    successful_tests = 0
    failed_tests = 0
    
    while time.time() < end_time:
        current_time = datetime.now().strftime("%H:%M:%S")
        
        if test_connection():
            successful_tests += 1
            logger.info(f"[{current_time}] ‚úÖ Teste {successful_tests + failed_tests} - OK")
        else:
            failed_tests += 1
            logger.warning(f"[{current_time}] ‚ùå Teste {successful_tests + failed_tests} - FALHOU")
            
            # Tenta reconectar
            if reconnect():
                logger.info("‚úÖ Reconex√£o autom√°tica bem-sucedida")
            else:
                logger.error("‚ùå Falha na reconex√£o autom√°tica")
        
        # Aguarda at√© o pr√≥ximo teste
        if time.time() < end_time:
            time.sleep(interval_seconds)
    
    # Relat√≥rio final
    total_tests = successful_tests + failed_tests
    success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
    
    logger.info("=" * 60)
    logger.info("üìä RELAT√ìRIO FINAL DE MONITORAMENTO")
    logger.info("=" * 60)
    logger.info(f"‚è±Ô∏è  Dura√ß√£o: {duration_minutes} minutos")
    logger.info(f"üî¢ Total de testes: {total_tests}")
    logger.info(f"‚úÖ Testes bem-sucedidos: {successful_tests}")
    logger.info(f"‚ùå Testes falharam: {failed_tests}")
    logger.info(f"üìà Taxa de sucesso: {success_rate:.1f}%")
    
    if success_rate >= 95:
        logger.info("üéâ Conex√£o est√°vel!")
    elif success_rate >= 80:
        logger.warning("‚ö†Ô∏è  Conex√£o com algumas instabilidades")
    else:
        logger.error("üö® Conex√£o muito inst√°vel - verificar configura√ß√µes!")

def check_environment():
    """Verifica as vari√°veis de ambiente."""
    logger.info("üîç Verificando vari√°veis de ambiente...")
    
    database_url = os.environ.get("DATABASE_URL")
    if database_url:
        # Mascara a senha para seguran√ßa
        masked_url = database_url.replace(
            database_url.split("@")[0].split(":")[-1], 
            "***"
        ) if "@" in database_url else database_url
        
        logger.info(f"‚úÖ DATABASE_URL configurada: {masked_url}")
        
        # Verifica se √© Render
        if "render.com" in database_url or "onrender.com" in database_url:
            logger.info("üåê Detectado ambiente Render")
            
            # Verifica par√¢metros SSL
            if "sslmode=require" in database_url:
                logger.info("‚úÖ SSL configurado corretamente")
            else:
                logger.warning("‚ö†Ô∏è  SSL n√£o configurado - adicionar ?sslmode=require")
        else:
            logger.info("üè† Ambiente local detectado")
    else:
        logger.error("‚ùå DATABASE_URL n√£o configurada!")
        return False
    
    return True

def main():
    """Fun√ß√£o principal."""
    logger.info("üöÄ Iniciando monitor de conex√£o com banco de dados")
    logger.info("=" * 60)
    
    # Verifica ambiente
    if not check_environment():
        logger.error("‚ùå Configura√ß√£o de ambiente inv√°lida")
        sys.exit(1)
    
    # Cria aplica√ß√£o
    try:
        app = create_app()
        with app.app_context():
            logger.info("‚úÖ Aplica√ß√£o Flask criada com sucesso")
            
            # Teste inicial
            logger.info("üîç Teste inicial de conex√£o...")
            if test_connection():
                logger.info("‚úÖ Conex√£o inicial OK")
            else:
                logger.error("‚ùå Falha na conex√£o inicial")
                if not reconnect():
                    logger.error("‚ùå N√£o foi poss√≠vel estabelecer conex√£o")
                    sys.exit(1)
            
            # Inicia monitoramento
            monitor_connection(duration_minutes=5, interval_seconds=30)
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar aplica√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 