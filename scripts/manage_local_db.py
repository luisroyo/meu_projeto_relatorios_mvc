#!/usr/bin/env python3
"""
Script para gerenciar o banco de dados PostgreSQL local.
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def run_command(command, check=True):
    """Executa um comando e retorna o resultado."""
    print(f"üîÑ Executando: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print(f"‚úÖ Sa√≠da: {result.stdout.strip()}")
    
    if result.stderr:
        print(f"‚ö†Ô∏è  Erro: {result.stderr.strip()}")
    
    if check and result.returncode != 0:
        print(f"‚ùå Comando falhou com c√≥digo {result.returncode}")
        return False
    
    return True

def start_local_db():
    """Inicia o banco de dados local."""
    print("üöÄ Iniciando PostgreSQL local...")
    
    # Verificar se Docker est√° rodando
    if not run_command("docker info", check=False):
        print("‚ùå Docker n√£o est√° rodando. Inicie o Docker Desktop primeiro.")
        return False
    
    # Iniciar o container
    if run_command("docker-compose up -d postgres_local"):
        print("‚úÖ PostgreSQL local iniciado com sucesso!")
        print("üìä URL: postgresql://postgres:postgres123@localhost:5432/relatorios_dev")
        return True
    else:
        print("‚ùå Falha ao iniciar PostgreSQL local")
        return False

def stop_local_db():
    """Para o banco de dados local."""
    print("üõë Parando PostgreSQL local...")
    
    if run_command("docker-compose down"):
        print("‚úÖ PostgreSQL local parado com sucesso!")
        return True
    else:
        print("‚ùå Falha ao parar PostgreSQL local")
        return False

def reset_local_db():
    """Reseta o banco de dados local (remove todos os dados)."""
    print("üîÑ Resetando PostgreSQL local...")
    
    if run_command("docker-compose down -v"):
        print("‚úÖ Volumes removidos")
        
        if run_command("docker-compose up -d postgres_local"):
            print("‚úÖ PostgreSQL local reiniciado com sucesso!")
            return True
    
    print("‚ùå Falha ao resetar PostgreSQL local")
    return False

def check_local_db():
    """Verifica o status do banco de dados local."""
    print("üîç Verificando status do PostgreSQL local...")
    
    # Verificar se o container est√° rodando
    result = subprocess.run("docker ps --filter name=relatorios_postgres_local --format '{{.Status}}'", 
                          shell=True, capture_output=True, text=True)
    
    if result.stdout.strip():
        print(f"‚úÖ Container rodando: {result.stdout.strip()}")
        return True
    else:
        print("‚ùå Container n√£o est√° rodando")
        return False

def setup_local_env():
    """Configura o ambiente local."""
    print("‚öôÔ∏è  Configurando ambiente local...")
    
    # Verificar se .env.local existe
    env_local = Path(".env.local")
    env_example = Path("env.local.example")
    
    if not env_local.exists() and env_example.exists():
        print("üìù Criando .env.local a partir do exemplo...")
        run_command(f"copy env.local.example .env.local")
        print("‚úÖ Arquivo .env.local criado!")
        print("üí° Edite o arquivo .env.local se necess√°rio")
    else:
        print("‚úÖ Arquivo .env.local j√° existe")

def main():
    """Fun√ß√£o principal."""
    if len(sys.argv) < 2:
        print("""
üîß Gerenciador de Banco de Dados Local

Uso: python scripts/manage_local_db.py <comando>

Comandos dispon√≠veis:
  start    - Inicia o PostgreSQL local
  stop     - Para o PostgreSQL local
  reset    - Reseta o banco (remove todos os dados)
  check    - Verifica o status do banco
  setup    - Configura o ambiente local
  all      - Executa setup + start + check

Exemplo:
  python scripts/manage_local_db.py start
        """)
        return
    
    command = sys.argv[1].lower()
    
    if command == "start":
        start_local_db()
    elif command == "stop":
        stop_local_db()
    elif command == "reset":
        reset_local_db()
    elif command == "check":
        check_local_db()
    elif command == "setup":
        setup_local_env()
    elif command == "all":
        setup_local_env()
        if start_local_db():
            time.sleep(5)  # Aguardar inicializa√ß√£o
            check_local_db()
    else:
        print(f"‚ùå Comando desconhecido: {command}")

if __name__ == "__main__":
    main() 